{"version":3,"sources":["Button.js","App.js","reportWebVitals.js","index.js"],"names":["Button","text","clickFunction","className","onClick","App","useState","resultText","changeResultText","evaluateExpression","eval","equalClick","includes","length","textButtonClick","e","target","innerHTML","clearButtonClick","map","item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qHAUeA,IARf,YAAyC,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,cACpB,OACI,qBAAKC,UAAU,SAASC,QAASF,EAAjC,SACKD,M,o0BCDb,SAASI,MAAO,IAAD,UAE4BC,oDAAS,IAFrC,2LAEJC,WAFI,cAEQC,iBAFR,cAGLC,mBAAqB,SAArBA,qBACF,OAAOC,KAAKH,aAEVI,WAAa,WACV,CAAC,IAAK,IAAK,IAAK,KAAKC,SAASL,WAAWA,WAAWM,OAAS,KAC9DL,iBAAiBC,uBAGnBK,gBAAkB,SAACC,GACf,CAAC,IAAK,IAAK,IAAK,KAAKH,SAASG,EAAEC,OAAOC,YAAc,CAAC,IAAK,IAAK,IAAK,KAAKL,SAASL,WAAWA,WAAWM,OAAS,KACpHL,iBAAiBD,WAAWQ,EAAEC,OAAOC,YAGvCC,iBAAmB,WACrBV,iBAAiB,KAEvB,OACE,mEAAKL,UAAU,MAAf,UACI,yFACA,kEAAKA,UAAU,cAAf,SACKI,aAEL,mEAAKJ,UAAU,mBAAf,UACI,mEAAKA,UAAU,SAAf,UACI,2DAAC,uCAAD,CAAQF,KAAK,KAAKC,cAAegB,mBAChC,CAAC,EAAE,EAAE,GAAGC,KAAI,SAACC,GAAD,OAAU,2DAAC,uCAAD,CAAQnB,KAAMmB,EAAMlB,cAAeY,wBAE9D,kEAAKX,UAAU,SAAf,SACK,CAAC,EAAE,EAAE,EAAE,GAAGgB,KAAI,SAACC,GAAD,OAAU,2DAAC,uCAAD,CAAQnB,KAAMmB,EAAMlB,cAAeY,uBAEhE,mEAAKX,UAAU,SAAf,UACK,CAAC,EAAE,EAAE,GAAGgB,KAAI,SAACC,GAAD,OAAU,2DAAC,uCAAD,CAAQnB,KAAMmB,EAAMlB,cAAeY,qBAC1D,2DAAC,uCAAD,CAAQb,KAAK,IAAIC,cAAeS,gBAEpC,mEAAKR,UAAU,SAAf,UACI,2DAAC,uCAAD,CAAQF,KAAK,IAAIC,cAAeY,kBAChC,2DAAC,uCAAD,CAAQb,KAAK,IAAIC,cAAeY,kBAChC,2DAAC,uCAAD,CAAQb,KAAK,IAAIC,cAAeY,kBAChC,2DAAC,uCAAD,CAAQb,KAAK,IAAIC,cAAeY,2BAOjCT,2B,wICxCAgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC3B,EAAA,EAAD,MAEF4B,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8c81ac62.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Button({ text, clickFunction}) {\n    return (\n        <div className=\"button\" onClick={clickFunction}>\n            {text}\n        </div>\n    );\n}\n\nexport default Button;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Button from \"./Button\";\n\nfunction App() {\n\n    const [resultText, changeResultText] = useState(\"\");\n    const evaluateExpression = () => {\n        return eval(resultText);\n    };\n    const equalClick = () => {\n        if (!['+', '*', '/', '-'].includes(resultText[resultText.length - 1])) {\n            changeResultText(evaluateExpression());\n        }\n    };\n    const textButtonClick = (e) => {\n        if (!(['+', '*', '/', '-'].includes(e.target.innerHTML) && ['+', '*', '/', '-'].includes(resultText[resultText.length - 1]))) {\n            changeResultText(resultText+e.target.innerHTML);\n        }\n    };\n    const clearButtonClick = () => {\n        changeResultText(\"\");\n    };\n  return (\n    <div className=\"App\">\n        <h1>Calculator</h1>\n        <div className=\"result-text\">\n            {resultText}\n        </div>\n        <div className=\"button-container\">\n            <div className=\"column\">\n                <Button text=\"AC\" clickFunction={clearButtonClick} />\n                {[1,2,3].map((item) => <Button text={item} clickFunction={textButtonClick} /> )}\n            </div>\n            <div className=\"column\">\n                {[4,5,6,7].map((item) => <Button text={item} clickFunction={textButtonClick} /> )}\n            </div>\n            <div className=\"column\">\n                {[8,9,0].map((item) => <Button text={item} clickFunction={textButtonClick} /> )}\n                <Button text=\"=\" clickFunction={equalClick} />\n            </div>\n            <div className=\"column\">\n                <Button text=\"+\" clickFunction={textButtonClick} />\n                <Button text=\"-\" clickFunction={textButtonClick} />\n                <Button text=\"*\" clickFunction={textButtonClick} />\n                <Button text=\"/\" clickFunction={textButtonClick} />\n            </div>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}